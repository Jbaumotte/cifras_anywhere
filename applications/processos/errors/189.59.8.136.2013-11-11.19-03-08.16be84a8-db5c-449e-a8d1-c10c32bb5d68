(dp1
S'output'
p2
S'<class \'_mysql_exceptions.ProgrammingError\'> (1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'\' at line 1")'
p3
sS'layer'
p4
S'/home/jbtte/web2py/applications/processos/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: latin1 -*-\n\ndef user():\n    return dict(form=auth())\n\n@auth.requires_login()\ndef index():\n    ## Creates a list of the last 5 files correctly inputed\n    user = (db.processo.user == auth.user_id)\n    myset = db(user)\n    last = myset.select(db.processo.ALL, orderby=~db.processo.id, limitby=(0, 5))\n    \n    ## Shows a statistic of the files inputed in the month\n    relatora = ( (db.processo.criado_em.month==7))\n    session.frelatora=db(relatora).count()\n    revisora = (db.processo.competencia == "Revisora")\n    session.frevisora=db(revisora).count()\n    session.ftotal = session.frelatora+session.frevisora\n    \n    return dict(rows=last)\n   \n\n\ndef cadastro():\n\n    form = SQLFORM.factory(Field(\'processo\', label=T(\'Numero do Processo: \'), requires=IS_NOT_EMPTY()))\n\n    if form.process().accepted:\n\n        soup_cadastrar(form.vars.processo)\n\n    return dict(form=form)\n\ndef soup_cadastrar(num):\n    import tj\n    processo = tj.get_page(num)\n    if len(processo)== 4:\n\n        session.processo_one = processo[0].decode(\'latin1\')\n        session.classe_one = processo[1].decode(\'latin1\')\n        session.processo_two = processo[2].decode(\'latin1\')\n        session.classe_two = processo[3].decode(\'latin1\')\n\n        redirect(URL(\'escolhe_processo\'))\n\n    else:\n       session.reu = processo[0].decode("latin1", "ignore")\n       session.classe = processo[1].decode("latin1", "ignore")\n       session.numero = processo[2]\n       session.crime = processo[3].decode("latin1", "ignore")\n       session.competencia = processo[4]\n       redirect(URL(\'cadastro_final\'))\n\n    return 0\n\n\n\ndef cadastro_final():\n\n    ##creating the submission form and hidding the date and user, which are filled in automatically\n    db.processo.criado_em.writable = False\n    db.processo.criado_em.readable = False\n    db.processo.user.writable = False\n    db.processo.user.readable = False\n    form = SQLFORM(db.processo)\n    ##pre-populating the form with the info obtained through get_page()\n    form.vars.classe = session.classe.encode("utf8")\n    form.vars.reu = session.reu.encode("utf8")\n    form.vars.numero = session.numero\n    form.vars.competencia = session.competencia.encode("utf8")\n    form.vars.crime = session.crime.encode("utf8")\n\n    if form.process().accepted:\n       session.flash = \'form accepted\'\n       redirect(URL(\'index\'))\n\n    return dict(form=form)\n\ndef pesquisa():\n    form = SQLFORM.factory(Field(\'reu\'),\n    Field(\'numero\'),\n    Field(\'competencia\'),\n    Field(\'Data_inicial\', \'date\'),\n    Field(\'Data_final\', \'date\', default = request.now))\n\n    if form.process().accepted:\n\n        if form.vars.numero!="":\n            numero = db.processo.numero.contains(form.vars.numero)\n            query = db(numero)\n            session.rows = query.select()\n            redirect(URL(\'result\'))\n\n        elif form.vars.reu != "":\n            reu = db.processo.reu.contains(form.vars.reu)\n            query = db(reu)\n            session.rows = query.select()\n            redirect(URL(\'result\'))\n\n\n        elif form.vars.competencia != "":\n            competencia = (db.processo.competencia == form.vars.competencia)\n            query = db(competencia)\n            session.rows = query.select()\n            redirect(URL(\'result\'))\n\n\n        elif (form.vars.Data_inicial!="") or (form.vars.Data_final!=request.now):\n            import datetime\n            from datetime import date\n            delta = datetime.timedelta(days=1)\n            session.inicial = form.vars.Data_inicial or (request.now-(60*delta))\n            session.final = form.vars.Data_final or request.now\n            data = (db.processo.criado_em >= session.inicial-delta) & (db.processo.criado_em <= session.final+delta)\n            query = db(data)\n            session.rows = query.select()\n            redirect(URL(\'result\'))\n\n    return dict(form=form)\n\ndef result():\n    return dict(rows=session.rows)\n\ndef escolhe_processo():\n    form1 = SQLFORM.factory(Field(\'classe\', default = session.classe_one.encode("utf8"), writable=False,))\n\n\n    form2 = SQLFORM.factory(Field(\'classe\', default = session.classe_two.encode("utf8"), writable=False ))\n\n\n    if form1.process(formname=\'form_one\').accepted:\n        #response.flash = session.processo_one.encode("utf8")\n        soup_cadastrar(session.processo_one)\n    if form2.process(formname=\'form_two\').accepted:\n        #response.flash = session.processo_two.encode("utf8")\n        soup_cadastrar(session.processo_two)\n\n    return dict(form1=form1, form2=form2)\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/jbtte/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/jbtte/web2py/applications/processos/controllers/default.py", line 140, in <module>\n  File "/home/jbtte/web2py/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/jbtte/web2py/gluon/tools.py", line 3022, in f\n    return action(*a, **b)\n  File "/home/jbtte/web2py/applications/processos/controllers/default.py", line 15, in index\n    session.frelatora=db(relatora).count()\n  File "/home/jbtte/web2py/gluon/dal.py", line 9948, in count\n    return db._adapter.count(self.query,distinct)\n  File "/home/jbtte/web2py/gluon/dal.py", line 1724, in count\n    self.execute(self._count(query, distinct))\n  File "/home/jbtte/web2py/gluon/dal.py", line 1784, in execute\n    return self.log_execute(*a, **b)\n  File "/home/jbtte/web2py/gluon/dal.py", line 1778, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/usr/local/lib/python2.7/dist-packages/MySQLdb/cursors.py", line 201, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/local/lib/python2.7/dist-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'\' at line 1")\n'
p11
s.